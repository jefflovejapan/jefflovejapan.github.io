I"?Q<p><a href="http://github.com/moya/moya">Moya</a> is functional networking library, built on top of <a href="https://github.com/Alamofire/Alamofire">Alamofire</a>, that applies the best of Swift’s language and compiler features to your network requests. Its key insight is tying URL request-building logic to an enumerated type, both guaranteeing that you don’t miss anything (<code class="highlighter-rouge">switch</code> statements need to be exhaustive), and allowing you to cleanly factor code out of your main suite of public “call this endpoint” functions. On top of that, there are subspecs supporting both <a href="https://github.com/Moya/Moya">ReactiveCocoa</a> and <a href="https://github.com/ReactiveX/RxSwift">RxSwift</a>, making it relatively easy to support <a href="https://realm.io/news/altconf-ash-furrow-functional-reactive-swift/">functional reactive programming</a> in your project.</p>

<h2 id="whats-in-the-box">What’s in the Box?</h2>

<h3 id="target">Target</h3>

<p>At its heart, Moya revolves around a single protocol called <code class="highlighter-rouge">MoyaTarget</code>. This is the enumerated type alluded to earlier, and encompasses your base URL and paths, supplied parameters, and HTTP methods. Let’s use the <a href="https://dev.twitter.com/rest/public">Twitter API</a> for this example, and call our implementation <code class="highlighter-rouge">TwitterTarget</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="kt">Target</span><span class="p">:</span> <span class="kt">MoyaTarget</span> <span class="p">{</span>
    <span class="k">case</span> <span class="o">.</span><span class="kt">HomeTimeline</span>
    <span class="k">case</span> <span class="o">.</span><span class="kt">NewPost</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>

    <span class="k">var</span> <span class="nv">baseURL</span><span class="p">:</span> <span class="kt">NSURL</span> <span class="p">{</span> <span class="k">return</span> <span class="kt">NSURL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"https://api.twitter.com/1.1/"</span><span class="p">)</span><span class="o">!</span> <span class="p">}</span>

    <span class="k">var</span> <span class="nv">path</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> 
        <span class="k">switch</span> <span class="k">self</span> <span class="p">{</span>
            <span class="k">case</span> <span class="o">.</span><span class="kt">HomeTimeline</span><span class="p">:</span>
                <span class="k">return</span> <span class="s">"statuses/user_timeline.json"</span>
            <span class="k">case</span> <span class="o">.</span><span class="kt">NewPost</span><span class="p">:</span>
                <span class="k">return</span> <span class="s">"statuses/update.json"</span>
        <span class="p">}</span> 
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">method</span><span class="p">:</span> <span class="kt">Moya</span><span class="o">.</span><span class="kt">Method</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="k">self</span> <span class="p">{</span>
            <span class="k">case</span> <span class="o">.</span><span class="kt">HomeTimeline</span><span class="p">:</span>
                <span class="k">return</span> <span class="o">.</span><span class="kt">GET</span>
            <span class="k">case</span> <span class="o">.</span><span class="kt">NewPost</span><span class="p">:</span>
                <span class="k">return</span> <span class="o">.</span><span class="kt">POST</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">parameters</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">AnyObject</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="k">self</span> <span class="p">{</span>
            <span class="k">case</span> <span class="o">.</span><span class="kt">HomeTimeline</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">[:]</span>
            <span class="k">case</span> <span class="o">.</span><span class="kt">NewPost</span><span class="p">(</span><span class="k">let</span> <span class="nv">text</span><span class="p">):</span>
                <span class="k">return</span> <span class="p">[</span><span class="s">"status"</span><span class="p">:</span> <span class="n">text</span><span class="p">]</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">sampleData</span><span class="p">:</span> <span class="kt">NSData</span> <span class="p">{</span> <span class="k">return</span> <span class="kt">NSData</span><span class="p">()</span> <span class="p">}</span>  <span class="c1">// We just need to return something here to fully implement the protocol</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So for each of the protocol methods we can switch on <code class="highlighter-rouge">self</code> (enums ftw), using <code class="highlighter-rouge">let</code> bindings to pull out associated values where we need them. The only non-obvious method is <code class="highlighter-rouge">sampleData</code> — it’s related to testing, we’ll come back to it later.</p>

<h3 id="provider">Provider</h3>

<p>In order to interact with our <code class="highlighter-rouge">TwitterTarget</code> type we’ll need an instance of <code class="highlighter-rouge">MoyaProvider</code>; its <code class="highlighter-rouge">request</code> method is the gateway between <code class="highlighter-rouge">TwitterTarget</code> and Twitter’s servers. While we’re at it, let’s write a public function to wrap all of this stuff up.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">let</span> <span class="nv">provider</span> <span class="o">=</span> <span class="kt">MoyaProvider</span><span class="o">&lt;</span><span class="kt">TwitterTarget</span><span class="o">&gt;</span><span class="p">()</span>

    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">getTimeline</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">tweets</span><span class="p">:</span> <span class="p">[</span><span class="kt">Tweet</span><span class="p">]?,</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">ErrorType</span><span class="p">?)</span> <span class="p">{</span>
        <span class="n">provider</span><span class="o">.</span><span class="nf">request</span><span class="p">(</span><span class="o">.</span><span class="kt">HomeTimeline</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="k">unowned</span> <span class="k">self</span><span class="p">]</span> <span class="p">(</span><span class="nv">data</span><span class="p">:</span> <span class="kt">NSData</span><span class="p">?,</span> <span class="nv">statusCode</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?,</span> <span class="nv">response</span><span class="p">:</span> <span class="kt">NSURLResponse</span><span class="p">?,</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">ErrorType</span><span class="p">?)</span> <span class="k">in</span>
            <span class="k">guard</span> <span class="k">self</span><span class="o">.</span><span class="nf">requestSucceeded</span><span class="p">(</span><span class="n">statusCode</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">let</span> <span class="nv">error</span> <span class="o">=</span> <span class="c1">// some error</span>
                <span class="nf">return</span> <span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
            <span class="p">}</span>

            <span class="k">guard</span> <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">,</span>
            <span class="n">json</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="kt">NSJSONSerialization</span><span class="p">(</span><span class="nv">data</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="kt">NSJSONReadingOptions</span><span class="p">(),</span>
            <span class="n">jsonArray</span> <span class="o">=</span> <span class="n">json</span> <span class="k">as?</span> <span class="p">[[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">AnyObject</span><span class="p">]]</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">let</span> <span class="nv">error</span> <span class="o">=</span> <span class="c1">// some error</span>
                <span class="nf">return</span> <span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
            <span class="p">}</span>

            <span class="k">let</span> <span class="nv">tweets</span> <span class="o">=</span> <span class="n">jsonArray</span><span class="o">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="kt">Tweet</span><span class="p">(</span><span class="nv">json</span><span class="p">:</span> <span class="nv">$0</span><span class="p">)</span> <span class="p">}</span>
            <span class="nf">return</span> <span class="p">(</span><span class="n">tweets</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>  
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>Using Moya we’ve factored everything but the bare essentials out of our public <code class="highlighter-rouge">getTimeline</code> function. The resulting code is simple, safe, and easy to reason about.</p>

<h2 id="testing">Testing</h2>

<p>An awesome feature of Moya is the ability to test our logic with canned API responses with just a couple of small changes to our code. First, let’s implement that <code class="highlighter-rouge">sampleData</code> method for real using the <a href="https://dev.twitter.com/rest/reference/get/statuses/home_timeline">sample responses</a> in Twitter’s API docs:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="kt">Target</span><span class="p">:</span> <span class="kt">MoyaTarget</span> <span class="p">{</span>

    <span class="p">(</span><span class="o">...</span><span class="p">)</span>

    <span class="k">var</span> <span class="nv">sampleData</span><span class="p">:</span> <span class="kt">NSData</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="k">self</span> <span class="p">{</span>
            <span class="k">case</span> <span class="o">.</span><span class="kt">HomeTimeline</span><span class="p">:</span>
                <span class="k">let</span> <span class="nv">jsonStr</span> <span class="o">=</span> <span class="s">"[{</span><span class="se">\"</span><span class="s">coordinates</span><span class="se">\"</span><span class="s">: null,</span><span class="se">\"</span><span class="s">truncated</span><span class="se">\"</span><span class="s">: false,</span><span class="se">\"</span><span class="s">created_at</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">Tue Aug 28 21:16:23 +0000 2012</span><span class="se">\"</span><span class="s">,</span><span class="se">\"</span><span class="s">favorited</span><span class="se">\"</span><span class="s">: false,</span><span class="se">\"</span><span class="s">id_str</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">240558470661799936</span><span class="se">\"</span><span class="s">,</span><span class="se">\"</span><span class="s">in_reply_to_user_id_str</span><span class="se">\"</span><span class="s">: null,</span><span class="se">\"</span><span class="s">entities</span><span class="se">\"</span><span class="s">: {</span><span class="se">\"</span><span class="s">urls</span><span class="se">\"</span><span class="s">: [],</span><span class="se">\"</span><span class="s">hashtags</span><span class="se">\"</span><span class="s">: [],</span><span class="se">\"</span><span class="s">user_mentions</span><span class="se">\"</span><span class="s">: []},</span><span class="se">\"</span><span class="s">text</span><span class="se">\"</span><span class="s">: ...]"</span>    <span class="c1">// truncated because massive</span>
                <span class="k">if</span> <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">jsonStr</span><span class="o">.</span><span class="nf">dataUsingEncoding</span><span class="p">(</span><span class="kt">NSUTF8StringEncoding</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="n">data</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"Couldn't serialize string"</span><span class="p">)</span>
                    <span class="k">return</span> <span class="kt">NSData</span><span class="p">()</span>
                <span class="p">}</span>

            <span class="k">case</span> <span class="o">.</span><span class="kt">NewPost</span><span class="p">:</span>
                <span class="p">(</span><span class="o">...</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now in order to use this in our tests, we’re going to need an instance of <code class="highlighter-rouge">MoyaProvider</code> that we’ve configured for testing:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">let</span> <span class="nv">testProvider</span> <span class="o">=</span> <span class="kt">MoyaProvider</span><span class="o">&lt;</span><span class="kt">TwitterTarget</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">endpointClosure</span><span class="p">:</span> <span class="kt">MoyaProvider</span><span class="o">.</span><span class="kt">DefaultEndpointMapping</span><span class="p">,</span> <span class="nv">endpointResolver</span><span class="p">:</span> <span class="kt">MoyaProvider</span><span class="o">.</span><span class="kt">DefaultEndpointResolution</span><span class="p">,</span> <span class="nv">stubBehavior</span><span class="p">:</span> <span class="kt">MoyaProvider</span><span class="o">.</span><span class="kt">ImmediateStubbingBehaviour</span><span class="p">)</span>
</code></pre></div></div>

<p>This is almost the default configuration we get with a new <code class="highlighter-rouge">MoyaProvider</code>, except for the <code class="highlighter-rouge">stubBehavior</code> parameter. We’re using it to tell the provider that we want to use the stubbed responses we specified above, and not actually call out to the network. Now we can write tests like this (using <a href="https://github.com/Quick/Quick">Quick</a> and <a href="https://github.com/Quick/Nimble">Nimble</a>, of course):</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nf">describe</span><span class="p">(</span><span class="s">"Getting the user's home timeline"</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">it</span><span class="p">(</span><span class="s">"Should have some tweets"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">getTimeline</span><span class="p">()</span> <span class="p">{</span> <span class="p">(</span><span class="n">tweets</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
                <span class="nf">expect</span><span class="p">(</span><span class="n">tweets</span><span class="p">)</span><span class="o">.</span><span class="nf">toNot</span><span class="p">(</span><span class="nf">beNil</span><span class="p">())</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="where-to-go-from-here">Where to go from Here?</h2>

<h3 id="headers">Headers</h3>

<p>In order to add custom headers (say, for authentication), you’re going to need to provide a value for the <code class="highlighter-rouge">endpointClosure</code> parameter of <code class="highlighter-rouge">MoyaProvider</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">let</span> <span class="nv">ourEndpointClosure</span> <span class="o">=</span> <span class="p">{</span> <span class="p">(</span><span class="nv">target</span><span class="p">:</span> <span class="kt">TwitterTarget</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Endpoint</span> <span class="k">in</span>
        <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="n">baseURL</span><span class="o">.</span><span class="kt">URLByAppendingPathComponent</span><span class="p">(</span><span class="n">target</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">absoluteString</span>
        <span class="k">let</span> <span class="nv">endpoint</span> <span class="o">=</span> <span class="kt">Endpoint</span><span class="p">(</span><span class="kt">URL</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span> <span class="nv">sampleResponse</span><span class="p">:</span> <span class="o">.</span><span class="kt">Success</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="n">target</span><span class="o">.</span><span class="n">sampleData</span><span class="p">}),</span> <span class="nv">method</span><span class="p">:</span> <span class="n">target</span><span class="o">.</span><span class="n">method</span><span class="p">,</span> <span class="nv">parameters</span><span class="p">:</span> <span class="n">target</span><span class="o">.</span><span class="n">parameters</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">headers</span> <span class="o">=</span> <span class="nf">headersForTarget</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">endpoint</span><span class="o">.</span><span class="nf">endpointByAddingHTTPHeaderFields</span><span class="p">(</span><span class="n">headers</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">provider</span> <span class="o">=</span> <span class="kt">MoyaProvider</span><span class="o">&lt;</span><span class="kt">TwitterTarget</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">endpointClosure</span><span class="p">:</span> <span class="n">ourEndpointClosure</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="functional-reactive-programming">Functional Reactive Programming</h3>

<p>If you’d rather use signals than completion closures you can still use everything we’ve done so far, only swapping the base <code class="highlighter-rouge">MoyaProvider</code> out with <code class="highlighter-rouge">RxMoyaProvider</code> (for RxSwift) or <code class="highlighter-rouge">ReactiveCocoaMoyaProvider</code> (for Reactive Cocoa). Now the provider’s <code class="highlighter-rouge">request</code> method returns an <code class="highlighter-rouge">Observable</code> (or <code class="highlighter-rouge">Signal</code>) that you can map, filter, and bind to stuff.</p>

<p>Happy coding!</p>
:ET